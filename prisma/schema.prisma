// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models ---

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  customerName String
  status       OrderStatus @default(SOLICITUD_NUEVO)
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

// --- Perfume-Specific Models ---

model Product {
  id              String      @id @default(cuid())
  name            String
  slug            String      @unique
  brand           String
  sex             Sex[]
  description     String
  price           Float
  discountPrice   Float?
  isDiscounted    Boolean     @default(false)
  stock           Int
  bottleSize      Int // in ml
  bottleType      String
  packaging       String
  averageRating   Float?
  shippingWeight  Float? // in kg
  seoTitle        String?
  seoDescription  String?
  imageUrls       String[]
  reviews         Review[]
  orderItems      OrderItem[]
  fragranceNotes  ProductFragranceNote[] // Many-to-many relation
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Review {
  id            String   @id @default(cuid())
  rating        Int
  reviewText    String
  customerName  String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  createdAt     DateTime @default(now())
}

// --- Fragrance Note Models (Many-to-Many) ---

model FragranceNote {
  id        String      @id @default(cuid())
  name      String      @unique
  slug      String      @unique
  color     String
  imageUrl  String?
  products  ProductFragranceNote[]
}

model ProductFragranceNote {
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  fragranceNote   FragranceNote @relation(fields: [fragranceNoteId], references: [id], onDelete: Cascade)
  fragranceNoteId String
  percentage      Int

  @@id([productId, fragranceNoteId])
}

// --- Hero Models ---

model Hero {
  id            String    @id @default(cuid())
  title         String
  paragraph     String
  heroImageUrl  String
  buttonLayout  String
  buttons       Button[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Button {
  id          String   @id @default(cuid())
  buttonText  String
  buttonLink  String
  isExternal  Boolean
  variant     String
  hero        Hero     @relation(fields: [heroId], references: [id], onDelete: Cascade)
  heroId      String
}


// --- Enums ---

enum Sex {
  WOMAN
  MAN
  UNISEX
}

enum OrderStatus {

  SOLICITUD_NUEVO

  ENVIADO_EN_PROCESO

  ACEPTADO

  CANCELADO

  ENVIADO_CUMPLIDO

  RECIBIDO_CONFORME

  FACTURADO_PAGADO

  CERRADO

}



model FooterContent {

  id      String @id @default(cuid())

  column  String

  title   String

  links   Json

}
